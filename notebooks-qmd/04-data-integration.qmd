---
title: "International Cherry Blossom Prediction Competition"
subtitle: "Data integration"
author: "Edimer David Jaramillo"
date: "`r lubridate::now()`"
lang: en-US
format:
  html:
    page-layout: article
    toc: true
    code-fold: true
    df-print: paged
    toc-location: left
    number-depth: 4
    theme: yeti
    code-copy: true
    highlight-style: github
    embed-resources: true
    code-tools:
      source: true    
---

```{r}
#| label: setup
#| include: false
knitr::opts_chunk$set(echo = TRUE,
                      warning = FALSE,
                      error = FALSE, 
                      message = FALSE,
                      fig.align = 'center')
```

# Libraries and setup

```{r}
library(tidyverse)
library(fs)
library(arrow)

theme_set(theme_bw() + theme(legend.position = "top"))

pattern_japan <- "japan"
pattern_kyoto <- "kyoto"
pattern_liestal <- "liestal"
pattern_meteoswiss <- "meteoswiss"
pattern_vancouver <- "vancouver"
pattern_usa_ny <- "newyork"
pattern_usa_wdc <- "washingtondc"
pattern_southk <- "south"

initial_files <- dir_ls("../data/")

files_cherry <-
  initial_files[!str_detect(initial_files, "USA-NPN|.md")]

files_soilgrids <- dir_ls("../external-data/soilgrids/csv/")

files_other <- dir_ls("../external-data/other/", regexp = ".csv")

files_bioclim <- dir_ls("../external-data/weather/", regexp = "bioclim")

files_weather <- dir_ls("../external-data/weather/", regexp = ".parquet")

files_photoperiod <- dir_ls("../external-data/other-photoperiod/", regexp = ".parquet")

# Data NPN
data_npn1 <- read_csv("../data/USA-NPN_individual_phenometrics_data.csv") |> 
  mutate(Observation_Date = str_c(First_Yes_Month, "-", First_Yes_Day, "-", First_Yes_Year),
         Observation_Date = mdy(Observation_Date),
         location = "NPN",
         year = year(Observation_Date)) |> 
  select(location,
         lat = Latitude, 
         long = Longitude,
         alt = Elevation_in_Meters,
         year,
         bloom_date = Observation_Date,
         bloom_doy = First_Yes_DOY) |> 
  group_by(location, lat, long, alt, year) |> 
  reframe(bloom_date = max(bloom_date, na.rm = TRUE),
          bloom_doy = max(bloom_doy, na.rm = TRUE))

data_npn2 <- read_csv("../data/USA-NPN_status_intensity_observations_data.csv") |> 
  mutate(Observation_Date = mdy(Observation_Date),
         location = "NPN",
         year = year(Observation_Date)) |>
  select(location,
         lat = Latitude, 
         long = Longitude,
         alt = Elevation_in_Meters,
         year,
         bloom_date = Observation_Date,
         bloom_doy = Day_of_Year) |> 
  group_by(location, lat, long, alt, year) |> 
  reframe(bloom_date = max(bloom_date, na.rm = TRUE),
          bloom_doy = max(bloom_doy, na.rm = TRUE))

data_npn <- bind_rows(data_npn1, data_npn2)
```

# Full data

- To the initial data provided for the competition I add by coordinates (longitude and latitude) the SoilGrids information, the complementary information (*other*) and the bioclimatic variables. Duplicate records are eliminated in this final table. The final table (`df_full`) is exported for further analysis. The total records in this table is 17966. **Note:** I mixed the data only for ease of handling, but I am aware that in the data provided by the *National Phenology Network* there are other types of species. I extract a variable named `country` that the country has, I do this in order to evaluate behavioral patterns in different countries and because it could be helpful to extrapolate to regions where we do not have historical flowering records. To differentiate the *NPN* data for the USA, I label it in the `country` variable as `USA-NPN` and the data for Washington DC as `USA-WDC`.
- Data provided by the *National Phenology Network* is included in the `df_full` table. I keep the information supplied by *NPN* separate and export the cleaned table to be used in separate analyses.
- I keep the weather data in a separate database (`df_weather`). There are more than five million records and they have different temporalities.
- I keep photoperiod information in a separate database (`df_photoperiod`).
- I export four files: `df_full`, `df_weather`, `df_photoperiod` and `data_npn` in *.parquet* format for further analysis.

```{r}
df_initial_cherry <-
  files_cherry |>
  map(.f = ~ read_csv(.x)) |>
  list_rbind() |> 
  bind_rows(data_npn)

df_soilgrids <-
  files_soilgrids |>
  map(.f = ~ read_csv(.x)) |>
  list_rbind()

df_other <-
  files_other |>
  map(.f = ~ read_csv(.x)) |>
  list_rbind()


names_bioclim <- str_c("bio", 1:19)
df_bioclim <-
  files_bioclim |>
  map(
    .f = function(x = .x) {
      res =
        read_csv(x) |>
        set_names(c("lat", "long", names_bioclim))
      return(res)
    }
  ) |>
  list_rbind()

df_full <-
  df_initial_cherry |>
  left_join(df_soilgrids, by = c("long", "lat")) |>
  left_join(df_other, by = c("long", "lat")) |>
  left_join(df_bioclim, by = c("long", "lat")) |> 
  distinct_all() |> 
  mutate(
    country = 
      case_when(
        str_detect(location, "Japan") ~ "Japan",
        str_detect(location, "kyoto") ~ "Japan",
        str_detect(location, "liestal") ~ "Switzerland",
        str_detect(location, "Switzerland") ~ "Switzerland",
        str_detect(location, "South Korea") ~ "South Korea",
        str_detect(location, "vancouver") ~ "Canada",
        str_detect(location, "washingtondc") ~ "USA-WDC",
        str_detect(location, "NPN") ~ "USA-NPN"
      )
  ) |> 
  relocate(location, country, everything())

write_parquet(df_full, "../external-data/df_full.parquet")

df_full |> head()
```

# Data weather

```{r}
df_weather <-
  files_weather |>
  map(
    .f = function(x = .x) {
      res =
        read_parquet(x)
      return(res)
    }
  ) |>
  list_rbind() |> 
  rename(long = LON,
         lat = LAT)

write_parquet(df_weather, "../external-data/df_weather.parquet")

df_weather |> head()
```

# Data photoperiod

```{r}
df_photoperiod <-
  files_photoperiod |>
  map(
    .f = function(x = .x) {
      res =
        read_parquet(x)
      return(res)
    }
  ) |>
  list_rbind()

write_parquet(df_photoperiod, "../external-data/df_photoperiod.parquet")

df_photoperiod |> head()
```

# Data USA National Phenology Network

- Since there is no information on bioclimatic variables for these coordinates, I am going to add the climatic information that was initially provided. The variable *`shrubs`* is also not taken into account because all its values are zero.
- I do not know the meaning or practical implication of some variables in the initial data provided by *NPN*, there are also variables that are not necessary for the approach that I implement, for this reason I do not take into account the following variables:
  - `Phenophase_Description`
  - `Genus`
  - `Common_Name`
  - `Kingdom`
  - `Phenophase_ID`
  - `Phenophase_Description`
  - `NumDays_Since_Prior_No`
  - `First_Yes_Year`
  - `First_Yes_Month`
  - `First_Yes_Day`
  - `First_Yes_Julian_Date`
  - `Last_Yes_Julian_Date`
  - `Last_Yes_Year`
  - `Last_Yes_Month`
  - `Last_Yes_Day`
  - `Last_Yes_Julian_Date`
  - `NumDays_Until_Next_No`  
  - `AGDD_in_F`
  - `Observation_Date`
  - `Last_Yes_DOY`
  - `First_Yes_DOY`
- In order to unify the target variable *bloom_doy* I use the average of the variables `First_Yes_DOY` and `Last_Yes_DOY` in the data *USA-NPN_individual_phenometrics_data.csv*. These two variables are also part of the list of excluded variables.
- I join the two databases provided by *NPN* and to this information I add the *fixed* data that was obtained for each coordinate. The final database has 4101 rows (a total of 152 different coordinates) and 44 columns.
- With the help of Google Maps and [bboxfinder](https://bboxfinder.com/#0.000000,0.000000,0.000000,0.000000) I verified each of the 152 unique coordinates and extracted two variables from those coordinates: the country and the city (contains state). I add this information to the initial data to make comparisons by countries or states of the same country. **Important note** I have doubts with a particular coordinate that is located in the state *NY*, however, when I validate the coordinate I get that it is in Ontario, Canada.

```{r}
# External data NPN
data_npn_fixed <-
  df_full |>
  filter(country == "USA-NPN") |>
  select(-contains("bio"),
         -c(shrubs, location, country, year, bloom_date,
            bloom_doy, alt)) |> 
  distinct(lat, long, .keep_all = TRUE)

# NPN
var_drop <-
  c(
    "Phenophase_Description",
    "Genus",
    "Common_Name",
    "Kingdom",
    "Phenophase_ID",
    "Phenophase_Description",
    "NumDays_Since_Prior_No",
    "First_Yes_Year",
    "First_Yes_Month",
    "First_Yes_Day",
    "First_Yes_Julian_Date",
    "Last_Yes_Julian_Date",
    "Last_Yes_Year",
    "Last_Yes_Month",
    "Last_Yes_Day",
    "Last_Yes_Julian_Date",
    "NumDays_Until_Next_No",
    "AGDD_in_F",
    "Last_Yes_DOY",
    "First_Yes_DOY"
  )

data_npn1 <-
  read_csv("../data/USA-NPN_individual_phenometrics_data.csv") |>
  mutate(
    Observation_Date = str_c(First_Yes_Month, "-", First_Yes_Day, "-", First_Yes_Year),
    Observation_Date = mdy(Observation_Date),
    bloom_doy = (Last_Yes_DOY + First_Yes_DOY) / 2
  ) |>
  distinct_all() |>
  rename(lat = Latitude,
         long = Longitude,
         alt = Elevation_in_Meters) |>
  select(!all_of(var_drop)) |> 
  relocate(Observation_Date,
           Site_ID,
           Individual_ID,
           Species,
           bloom_doy,
           everything())

data_npn2 <- 
  read_csv("../data/USA-NPN_status_intensity_observations_data.csv") |> 
  mutate(
    Observation_Date = mdy(Observation_Date),
    bloom_doy = Day_of_Year
  ) |>
  distinct_all() |>
  rename(lat = Latitude,
         long = Longitude,
         alt = Elevation_in_Meters) |>
  select(all_of(names(data_npn1))) |> 
  relocate(Observation_Date,
           Site_ID,
           Individual_ID,
           Species,
           bloom_doy,
           everything())

# Join data NPN + data "fixed" or "static"
data_npn <- bind_rows(data_npn1, data_npn2) |> 
  left_join(data_npn_fixed, by = c("lat", "long")) |> 
  distinct_all()

# Countries vector
countries <-
  c(
    "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "Canada",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "Canada",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "China",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "Japan",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "Canada",
     "USA",
     "USA",
     "USA",
     "USA",
     "Canada",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "China",
     "USA",
     "USA",
     "China",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "USA",
     "Canada",
     "USA",
     "USA",
     "USA",
     "USA",
     "Canada",
     "Canada",
     "USA"
  )

# Cities vector
cities <-
  c(
    "Fayetteville, North Carolina",
     "Raleigh, North Carolina",
     "Washington D.C.",
     "Knoxville, Tennessee",
     "San francisco California",
     "Roanoke, Virginia",
     "Burlington, Vermont",
     "Gatlinburg, Tennessee",
     "Pigeon Forge, Tennessee",
     "Denver, Colorado",
     "New York, New York",
     "Evansville, Indiana",
     "Boston, Massachusetts",
     "Fargo, North Dakota",
     "Charlotte, North Carolina",
     "Kansas City, Missouri",
     "New York, New York",
     "Duluth, Minnesota",
     "Thunder Bay, Ontario",
     "Washington D.C.",
     "Washington D.C.",
     "Washington D.C.",
     "Washington D.C.",
     "Washington D.C.",
     "Newport, Oregon",
     "Washington D.C.",
     "Washington D.C.",
     "Washington D.C.",
     "Washington D.C.",
     "Washington D.C.",
     "Washington D.C.",
     "Washington D.C.",
     "Alexandria, Virginia",
     "Alexandria, Virginia",
     "New York, New York",
     "New York, New York",
     "New York, New York",
     "Alexandria, Virginia",
     "New York, New York",
     "Minneapolis, Minnesota",
     "London, Kentucky",
     "Hagerstown, Maryland",
     "London, Kentucky",
     "Nashville, Tennessee",
     "Philadelphia, Pennsylvania",
     "Allentown, Pennsylvania",
     "New York, New York",
     "Sudbury, Ontario",
     "Philadelphia, Pennsylvania",
     "Roanoke, Virginia",
     "Denver, Colorado",
     "Lexington, Kentucky",
     "Indianapolis, Indiana",
     "Denver, Colorado",
     "Chengdu, Sichuan",
     "New York, New York",
     "Sacramento, California",
     "Asheville, North Carolina",
     "New York, New York",
     "Salem, Oregon",
     "Seattle, Washington",
     "Seattle, Washington",
     "Salem, Oregon",
     "Portland, Oregon",
     "Seattle, Washington",
     "Seattle, Washington",
     "Tacoma, Washington",
     "Muncie, Ind.",
     "Kyoto, Kyoto",
     "Redmond, Washington",
     "Salem, Oregon",
     "Northampton, Massachusetts",
     "Asheville, North Carolina",
     "Salem, Oregon",
     "Raleigh, North Carolina",
     "Albany, New York",
     "Duluth, Minnesota",
     "New York, New York",
     "New York, New York",
     "Providence, Rhode Island",
     "Seattle, Washington",
     "Greeley, Colorado",
     "Lexington, Kentucky",
     "Portland, Oregon",
     "Columbus, Ohio",
     "North Bend, Washington",
     "Denver, Colorado",
     "Seattle, Washington",
     "Sacramento, California",
     "Klamath Falls, Oregon",
     "Reno, Nevada",
     "Edmonton, Alberta",
     "Eugene, Oregon",
     "Corvallis, Oregon",
     "Longview, Washington",
     "Port Angeles, Washington",
     "Vancouver, British Columbia",
     "Salem, Oregon",
     "Albany, Oregon",
     "Portland, Oregon",
     "Lebanon, Virginia",
     "Asheville, North Carolina",
     "Boston, Massachusetts",
     "Baltimore, Maryland",
     "Newark, New Jersey",
     "San francisco California",
     "New York, New York",
     "Okinawa",
     "Lexington, Kentucky",
     "New York, New York",
     "Dalian, Liaoning",
     "Fayetteville, North Carolina",
     "Raleigh, North Carolina",
     "Goldsboro, North Carolina",
     "Buffalo, New York",
     "Newburgh, New York",
     "Amherst, Massachusetts",
     "Buffalo, New York",
     "New York, New York",
     "Washington D.C.",
     "Providence, Rhode Island",
     "Cambridge, Massachusetts",
     "Atlantic City, New Jersey",
     "Newport, Oregon",
     "Lexington, Kentucky",
     "New York, New York",
     "Portland, Oregon",
     "Greenfield, Massachusetts",
     "Riverhead, New York",
     "Raleigh, North Carolina",
     "New York, New York",
     "New York, New York",
     "Allentown, Pennsylvania",
     "Williamsport, Pennsylvania",
     "Baltimore, Maryland",
     "Salt Lake City, Utah",
     "Lexington, Kentucky",
     "Providence, Rhode Island",
     "Newark, New Jersey",
     "Harrisburg, Pennsylvania",
     "Philadelphia, Pennsylvania",
     "Johnson City, Tennessee",
     "Syracuse, New York",
     "Wilmington, Delaware",
     "Vancouver, British Columbia",
     "Chicago, Illinois",
     "Burlington, Vermont",
     "Boston, Massachusetts",
     "Portland, Oregon",
     "Toronto, Ontario",
     "Niagara Falls, Ontario",
     "Eugene, Oregon"
  )

data_npn <-
  data_npn |>
  left_join(
    data_npn |>
      distinct(State, lat, long) |>
      mutate(country = countries,
             city = cities),
    by = c("State", "lat", "long")
  )

# Export data
write_parquet(data_npn, "../external-data/df_npn_usa.parquet")

data_npn |> head()
```



